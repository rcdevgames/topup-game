basePath: /api
definitions:
  models.AdminUser:
    properties:
      created_at:
        type: string
      created_by:
        type: integer
      creator:
        allOf:
        - $ref: '#/definitions/models.AdminUser'
        description: Relations
      email:
        type: string
      id:
        type: integer
      last_login_at:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      role:
        enum:
        - super_admin
        - admin
        - operator
        - moderator
        type: string
      status:
        enum:
        - active
        - inactive
        type: string
      updated_at:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - name
    - username
    type: object
  models.Category:
    properties:
      created_at:
        type: string
      description:
        type: string
      display_order:
        type: integer
      icon_url:
        type: string
      id:
        type: integer
      name:
        maxLength: 100
        minLength: 2
        type: string
      products:
        description: Relations
        items:
          $ref: '#/definitions/models.Product'
        type: array
      slug:
        type: string
      status:
        enum:
        - active
        - inactive
        type: string
      updated_at:
        type: string
    required:
    - name
    type: object
  models.FormField:
    properties:
      field:
        type: string
      label:
        type: string
      options:
        items:
          type: string
        type: array
      placeholder:
        type: string
      required:
        type: boolean
      type:
        enum:
        - text
        - select
        - number
        type: string
    required:
    - field
    - label
    - type
    type: object
  models.GameAccount:
    properties:
      created_at:
        type: string
      game_id:
        maxLength: 100
        type: string
      game_name:
        maxLength: 100
        type: string
      id:
        type: integer
      is_primary:
        type: boolean
      nickname:
        maxLength: 100
        type: string
      server:
        maxLength: 50
        type: string
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      user_id:
        type: integer
      zone_id:
        maxLength: 50
        type: string
    required:
    - game_id
    - game_name
    - user_id
    type: object
  models.GameAccountData:
    properties:
      game_account:
        type: string
      game_server:
        type: string
      game_zone:
        type: string
      nickname:
        type: string
    required:
    - game_account
    type: object
  models.Product:
    properties:
      category:
        allOf:
        - $ref: '#/definitions/models.Category'
        description: Relations
      category_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      discount_percentage:
        maximum: 100
        minimum: 0
        type: integer
      display_order:
        type: integer
      form_config:
        items:
          $ref: '#/definitions/models.FormField'
        type: array
      id:
        type: integer
      image_url:
        type: string
      name:
        maxLength: 200
        minLength: 2
        type: string
      original_price:
        minimum: 0
        type: number
      price:
        minimum: 0
        type: number
      slug:
        type: string
      status:
        enum:
        - active
        - inactive
        - out_of_stock
        type: string
      transactions:
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
      updated_at:
        type: string
    required:
    - category_id
    - form_config
    - name
    - price
    type: object
  models.Transaction:
    properties:
      completed_at:
        type: string
      created_at:
        type: string
      expired_at:
        type: string
      game_account_data:
        allOf:
        - $ref: '#/definitions/models.GameAccountData'
        description: Game Account Info (denormalized for transaction history)
      id:
        type: integer
      ip_address:
        type: string
      logs:
        items:
          $ref: '#/definitions/models.TransactionLog'
        type: array
      payment_fee:
        minimum: 0
        type: number
      payment_method:
        description: Payment
        enum:
        - gopay
        - ovo
        - dana
        - bca
        - mandiri
        - bni
        type: string
      payment_reference:
        type: string
      payment_status:
        enum:
        - pending
        - paid
        - failed
        - expired
        - refunded
        type: string
      payment_url:
        type: string
      processed_at:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: integer
      product_price:
        description: Pricing
        minimum: 0
        type: number
      status:
        description: Status & Processing
        enum:
        - pending
        - processing
        - completed
        - failed
        - cancelled
        type: string
      total_amount:
        minimum: 0
        type: number
      transaction_code:
        type: string
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      user_agent:
        description: Metadata
        type: string
      user_id:
        type: integer
      voucher_discount:
        minimum: 0
        type: number
      voucher_usages:
        items:
          $ref: '#/definitions/models.VoucherUsage'
        type: array
      whatsapp:
        description: Contact
        type: string
    required:
    - game_account_data
    - payment_method
    - product_id
    - product_price
    - total_amount
    - user_id
    - whatsapp
    type: object
  models.TransactionLog:
    properties:
      admin:
        $ref: '#/definitions/models.AdminUser'
      created_at:
        type: string
      created_by_admin:
        type: integer
      id:
        type: integer
      message:
        type: string
      metadata:
        additionalProperties: true
        type: object
      status_from:
        type: string
      status_to:
        type: string
      transaction:
        allOf:
        - $ref: '#/definitions/models.Transaction'
        description: Relations
      transaction_id:
        type: integer
    required:
    - status_to
    - transaction_id
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified_at:
        type: string
      game_accounts:
        description: Relations
        items:
          $ref: '#/definitions/models.GameAccount'
        type: array
      id:
        type: integer
      name:
        maxLength: 100
        minLength: 2
        type: string
      phone:
        type: string
      phone_verified_at:
        type: string
      status:
        enum:
        - active
        - inactive
        - suspended
        type: string
      transactions:
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
      updated_at:
        type: string
    required:
    - name
    - phone
    type: object
  models.Voucher:
    properties:
      application_type:
        enum:
        - all
        - category
        - product
        type: string
      applications:
        description: Relations
        items:
          $ref: '#/definitions/models.VoucherApplication'
        type: array
      code:
        maxLength: 50
        minLength: 3
        type: string
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: integer
      max_discount_amount:
        minimum: 0
        type: number
      max_uses_per_user:
        minimum: 1
        type: integer
      min_transaction_amount:
        minimum: 0
        type: number
      quota:
        minimum: 1
        type: integer
      start_date:
        type: string
      status:
        enum:
        - active
        - inactive
        - expired
        type: string
      type:
        enum:
        - percentage
        - fixed
        type: string
      updated_at:
        type: string
      usages:
        items:
          $ref: '#/definitions/models.VoucherUsage'
        type: array
      used_count:
        type: integer
      value:
        minimum: 0
        type: number
    required:
    - code
    - end_date
    - quota
    - start_date
    - type
    - value
    type: object
  models.VoucherApplication:
    properties:
      applicable_id:
        type: integer
      applicable_type:
        enum:
        - category
        - product
        type: string
      created_at:
        type: string
      id:
        type: integer
      voucher:
        allOf:
        - $ref: '#/definitions/models.Voucher'
        description: Relations
      voucher_id:
        type: integer
    required:
    - applicable_id
    - applicable_type
    - voucher_id
    type: object
  models.VoucherUsage:
    properties:
      discount_amount:
        minimum: 0
        type: number
      id:
        type: integer
      transaction:
        $ref: '#/definitions/models.Transaction'
      transaction_id:
        type: integer
      used_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
      voucher:
        allOf:
        - $ref: '#/definitions/models.Voucher'
        description: Relations
      voucher_id:
        type: integer
    required:
    - discount_amount
    - transaction_id
    - user_id
    - voucher_id
    type: object
  services.AdminLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  services.AdminLoginResponse:
    properties:
      access_token:
        type: string
      admin:
        $ref: '#/definitions/models.AdminUser'
      refresh_token:
        type: string
    type: object
  services.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        maxLength: 100
        minLength: 6
        type: string
    required:
    - current_password
    - new_password
    type: object
  services.CreateAdminRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        maxLength: 100
        minLength: 6
        type: string
      role:
        enum:
        - super_admin
        - admin
        - operator
        - moderator
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - name
    - password
    - role
    - username
    type: object
  services.CreateCategoryRequest:
    properties:
      description:
        type: string
      display_order:
        type: integer
      name:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - name
    type: object
  services.CreateProductRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      discount_percentage:
        maximum: 100
        minimum: 0
        type: integer
      display_order:
        type: integer
      form_config:
        items:
          $ref: '#/definitions/models.FormField'
        type: array
      name:
        maxLength: 200
        minLength: 2
        type: string
      original_price:
        minimum: 0
        type: number
      price:
        minimum: 0
        type: number
    required:
    - category_id
    - form_config
    - name
    - price
    type: object
  services.LoginRequest:
    properties:
      password:
        type: string
      phone:
        type: string
    required:
    - password
    - phone
    type: object
  services.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  services.RegisterRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        maxLength: 100
        minLength: 6
        type: string
      phone:
        type: string
    required:
    - name
    - password
    - phone
    type: object
  services.UpdateAdminRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      role:
        enum:
        - super_admin
        - admin
        - operator
        - moderator
        type: string
      status:
        enum:
        - active
        - inactive
        type: string
    required:
    - name
    - role
    - status
    type: object
  services.UpdateCategoryRequest:
    properties:
      description:
        type: string
      display_order:
        type: integer
      name:
        maxLength: 100
        minLength: 2
        type: string
      status:
        enum:
        - active
        - inactive
        type: string
    required:
    - name
    - status
    type: object
  services.UpdateProfileRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - name
    type: object
  utils.APIResponse:
    properties:
      data: {}
      errors:
        items:
          type: string
        type: array
      message:
        type: string
      pagination:
        $ref: '#/definitions/utils.Pagination'
      success:
        type: boolean
    type: object
  utils.Pagination:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@wawstore.com
    name: API Support
    url: https://wawstore.com/support
  description: Backend API for Waw Store - Game Topup Platform
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://wawstore.com/terms
  title: Waw Store Topup Game Online API
  version: "1.0"
paths:
  /admin/analytics/dashboard:
    get:
      description: Get dashboard analytics data for admin
      parameters:
      - default: month
        description: Analytics period
        enum:
        - today
        - week
        - month
        - year
        in: query
        name: period
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  properties:
                    pending_transactions:
                      type: integer
                    total_revenue:
                      type: number
                    total_transactions:
                      type: integer
                    total_users:
                      type: integer
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get dashboard analytics
      tags:
      - admin
  /admin/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate admin user and return tokens
      parameters:
      - description: Admin login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.AdminLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/services.AdminLoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Admin login
      tags:
      - admin
  /admin/auth/logout:
    post:
      description: Logout admin user (client should discard tokens)
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Admin logout
      tags:
      - admin
  /admin/auth/profile:
    get:
      description: Get current admin user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.AdminUser'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get admin profile
      tags:
      - admin
  /admin/auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh admin access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/services.AdminLoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Refresh admin access token
      tags:
      - admin
  /admin/categories:
    get:
      description: Get paginated categories for admin management
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Category'
                  type: array
                pagination:
                  $ref: '#/definitions/utils.Pagination'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get categories for admin
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new category (Admin only)
      parameters:
      - description: Category creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - admin
  /admin/categories/{id}:
    delete:
      description: Delete a category by ID (Admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete a category
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Update a category by ID (Admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Update a category
      tags:
      - admin
  /admin/categories/{id}/upload-icon:
    post:
      consumes:
      - multipart/form-data
      description: Upload icon for a category (Admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category icon file
        in: formData
        name: icon
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  properties:
                    icon_url:
                      type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Upload category icon
      tags:
      - admin
  /admin/products:
    get:
      description: Get paginated list of products for admin management
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by status
        enum:
        - active
        - inactive
        - out_of_stock
        in: query
        name: status
        type: string
      - description: Filter by category ID
        in: query
        name: category_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
                pagination:
                  $ref: '#/definitions/utils.Pagination'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get products for admin
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new product (Admin only)
      parameters:
      - description: Product creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Create product
      tags:
      - admin
  /admin/products/{id}:
    get:
      description: Get detailed product information by ID for admin
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get product by ID for admin
      tags:
      - admin
  /admin/products/{id}/upload-image:
    post:
      consumes:
      - multipart/form-data
      description: Upload image for a product (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  properties:
                    image_url:
                      type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Upload product image
      tags:
      - admin
  /admin/transactions:
    get:
      description: Get paginated list of all transactions for admin management
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by status
        enum:
        - pending
        - processing
        - completed
        - failed
        - cancelled
        in: query
        name: status
        type: string
      - description: Filter by user ID
        in: query
        name: user_id
        type: integer
      - description: Filter from date (YYYY-MM-DD)
        in: query
        name: date_from
        type: string
      - description: Filter to date (YYYY-MM-DD)
        in: query
        name: date_to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Transaction'
                  type: array
                pagination:
                  $ref: '#/definitions/utils.Pagination'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get transactions for admin
      tags:
      - admin
  /admin/transactions/{id}/status:
    put:
      consumes:
      - application/json
      description: Update transaction status (Admin only)
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status update request
        in: body
        name: request
        required: true
        schema:
          properties:
            message:
              type: string
            status:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Transaction'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Update transaction status
      tags:
      - admin
  /admin/users:
    get:
      description: Get paginated list of admin users (Super Admin/Admin only)
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.AdminUser'
                  type: array
                pagination:
                  $ref: '#/definitions/utils.Pagination'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get all admin users
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new admin user (Super Admin/Admin only)
      parameters:
      - description: Admin creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.CreateAdminRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.AdminUser'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Create admin user
      tags:
      - admin
  /admin/users/{id}:
    delete:
      description: Delete admin user by ID (Super Admin only)
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete admin user
      tags:
      - admin
    get:
      description: Get user details by ID for admin purposes
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID (Admin only)
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Update admin user by ID (Super Admin/Admin only)
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      - description: Admin update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UpdateAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.AdminUser'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Update admin user
      tags:
      - admin
  /admin/vouchers:
    get:
      description: Get paginated list of vouchers for admin management
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by status
        enum:
        - active
        - inactive
        - expired
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Voucher'
                  type: array
                pagination:
                  $ref: '#/definitions/utils.Pagination'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get vouchers for admin
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new voucher (Admin only)
      parameters:
      - description: Voucher data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Voucher'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Voucher'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Create voucher
      tags:
      - admin
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change current user password
      parameters:
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return tokens
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/services.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      description: Logout user (client should discard tokens)
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/profile:
    get:
      description: Get current user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
    put:
      consumes:
      - application/json
      description: Update current user profile
      parameters:
      - description: Update profile request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/services.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/services.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Register a new user
      tags:
      - auth
  /categories:
    get:
      description: Get all active categories for public view
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Category'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get all categories
      tags:
      - categories
  /categories/{id}:
    get:
      description: Get a specific category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get category by ID
      tags:
      - categories
  /game-accounts:
    get:
      description: Get all game accounts for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.GameAccount'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user game accounts
      tags:
      - game-accounts
    post:
      consumes:
      - application/json
      description: Create a new game account for the current user
      parameters:
      - description: Game account data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GameAccount'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.GameAccount'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Create game account
      tags:
      - game-accounts
  /game-accounts/{id}:
    delete:
      description: Delete a game account by ID
      parameters:
      - description: Game Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete game account
      tags:
      - game-accounts
    put:
      consumes:
      - application/json
      description: Update a game account by ID
      parameters:
      - description: Game Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated game account data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GameAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.GameAccount'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Update game account
      tags:
      - game-accounts
  /products:
    get:
      description: Get all active products for public view
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get all products
      tags:
      - products
  /products/{id}:
    get:
      description: Get a specific product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get product by ID
      tags:
      - products
  /products/category/{category_id}:
    get:
      description: Get all products in a specific category
      parameters:
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
                pagination:
                  $ref: '#/definitions/utils.Pagination'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get products by category
      tags:
      - products
  /products/search:
    get:
      description: Search products by name or description
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - description: Category ID filter
        in: query
        name: category_id
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
                pagination:
                  $ref: '#/definitions/utils.Pagination'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Search products
      tags:
      - products
  /transactions:
    get:
      description: Get paginated list of current user's transactions
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by status
        enum:
        - pending
        - processing
        - completed
        - failed
        - cancelled
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Transaction'
                  type: array
                pagination:
                  $ref: '#/definitions/utils.Pagination'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user transactions
      tags:
      - transactions
    post:
      consumes:
      - application/json
      description: Create a new topup transaction
      parameters:
      - description: Transaction data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Transaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Transaction'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Create transaction
      tags:
      - transactions
  /transactions/{id}:
    get:
      description: Get detailed transaction information by ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Transaction'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get transaction by ID
      tags:
      - transactions
  /transactions/{id}/cancel:
    post:
      description: Cancel a pending transaction
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Transaction'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Cancel transaction
      tags:
      - transactions
  /vouchers/validate:
    post:
      consumes:
      - application/json
      description: Validate a voucher code and return discount information
      parameters:
      - description: Voucher validation request
        in: body
        name: request
        required: true
        schema:
          properties:
            code:
              type: string
            product_id:
              type: integer
            total_amount:
              type: number
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  properties:
                    discount_amount:
                      type: number
                    message:
                      type: string
                    valid:
                      type: boolean
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Validate voucher
      tags:
      - vouchers
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
